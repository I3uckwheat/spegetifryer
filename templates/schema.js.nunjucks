const {
  GraphQLBoolean,
  GraphQLFloat,
  GraphQLInt,
  GraphQLList,
  GraphQLObjectType,
  GraphQLString,
} = require('graphql');

const fs = require('fs');
const path = require('path');

const joinMonster = require('join-monster').default;

const db = require('../db2Handler');
const graphQLHelpers = require('../graphQLHelpers');

const tableDependencies = {
  self: require(path.join(__dirname, 'columns.json')),
  {%- for relation in relations %}
  {{ relation.table }}: require(path.join(__dirname, '..', '{{ relation.table }}', 'columns.json')),
  {%- endfor %}
};

const customResolvers = require('../../{{ name }}/{{ name }}')(db);

const fields = graphQLHelpers.buildColumnFields(
  JSON.parse(fs.readFileSync(path.join(__dirname, 'columns.json')))
);

const {{ name }} = exports.{{ name }} = new GraphQLObjectType({
  name: "{{ name }}",
  fields: () => ({
    ...fields,
    {% for relation in relations %}
    {{ relation.table }}: {
      description: "{{ name }} description",
      type: {{ relation.returnType }},
      args: graphQLHelpers.getArgsByColumns(tableDependencies.{{ relation.table }}),
      {%- if relation.junction %}
      junction: {
        sqlTable: '{{ relation.junction.junctionTable }}',
        sqlJoins: [
          // first the parent table to the junction
          (followerTable, junctionTable, args) => "{{ relation.junction.parent }}",
          // then the junction to the child
          (junctionTable, followeeTable, args) => "{{ relation.junction.child }}",
        ],
      },
      {% else %}
      sqlJoin: ({{ name }}Table, {{ relation.table }}Table, args) => {
        const userSuppliedJoinOn = graphQLHelpers.buildConditionsByArgs(args);

        // if a user supplied args on the JOIN table, tack those on
        return userSuppliedJoinOn
          ? `{{ relation.joinOn }} AND ${userSuppliedJoinOn}`
          : "{{ relation.joinOn }}";
      },
      {%- endif %}
    },
    {% endfor %}
    ...customResolvers
  })
})

{{ name }}._typeConfig = {
  sqlTable: "{{ library }}.{{ name }}",
  uniqueKey: {{ uniqueKey|safe }},
}

const {{ name }}Resolver = exports.{{ name }}Resolver = {
  {{ name }}: {
    type: new GraphQLList({{ name }}),
    {# allow table columns to be used as GraphQL args #}
    args: {
      where: { type: GraphQLString },
      by: { type: GraphQLString },
      ...graphQLHelpers.getArgsByColumns(tableDependencies.self),
    },
    where: (table, args) => graphQLHelpers.buildConditionsByArgs(args),
    orderBy: (args) => graphQLHelpers.buildSqlOrderBy(args),
    resolve: (parent, args, context, info) => (
      joinMonster(info, context, sql => db.prepareExecute(sql + " FETCH FIRST 100 ROWS ONLY"), [])
        .then(results => (Promise.resolve(graphQLHelpers.trimObj(results))))
    )
  }
}
{% for relation in relations %}
const {
  {{ relation.table }}
} = require('../{{ relation.table }}/{{ relation.table }}');
{% endfor %}
